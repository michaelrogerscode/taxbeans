package com.github.taxbeans.crypto.csv;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.money.Monetary;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.taxbeans.forms.utils.ZonedDateTimeUtils;
import com.github.taxbeans.csv.CSVParser;
import com.github.taxbeans.csv.CSVWriter;
import com.github.taxbeans.crypto.CoinTrackingParser;
import com.github.taxbeans.crypto.CryptoEvent;
import com.github.taxbeans.crypto.CurrencyAmount;
import com.github.taxbeans.crypto.CurrencyBalance;
import com.github.taxbeans.crypto.CurrencyBatchGroup;
import com.github.taxbeans.crypto.CurrencyConversion;
import com.github.taxbeans.crypto.CurrencyDeposit;
import com.github.taxbeans.crypto.CurrencyExchange;
import com.github.taxbeans.crypto.CurrencyFee;
import com.github.taxbeans.crypto.CurrencyTradeLoss;
import com.github.taxbeans.crypto.CurrencyTradeProfit;
import com.github.taxbeans.crypto.CurrencyWithdrawal;
import com.github.taxbeans.crypto.ExchangeCurrencyBalance;
import com.github.taxbeans.crypto.FormatUtils;
import com.github.taxbeans.crypto.FormattedComment;
import com.github.taxbeans.crypto.KrakenAdapter;

public class KrakenCSVParser {

	private static final CurrencyExchange KRAKEN = CurrencyExchange.KRAKEN;
	private static final ZoneId UTC_ZONE = ZoneId.of("UTC");
	final static Logger logger = LoggerFactory.getLogger(KrakenCSVParser.class);

	public static List<CryptoEvent> parseCSVLines(List<String[]> csv, List<CryptoEvent> cryptoEvents, CurrencyBatchGroup batchGroup)
			throws ParseException {

		int bothKrakenTradeSidesHaveFees = 0;
		int conversionHalfCount = 0;
		int deposits = 0;
		int specialCaseMarginGain = 0;
		int sellAmountEqualsFeeAmountForKrakenMargin = 0;
		int withdrawals = 0;
		int eventCount = 0;
		int incomeTypeCount = 0;
		int buyAmountEqualsFeeAmountForKrakenMargin = 0;
		int lossTypeCount = 0;
		int rowNum = 1; // due to title row
		Map<String, CryptoEvent> transactionIDMap = new HashMap<String, CryptoEvent>();
		Map<String, ZonedDateTime> withdrawalRefMap = new HashMap<String, ZonedDateTime>();
		CurrencyBalance btcBalance = CurrencyBalance.of();
		for (String[] row : csv) {
			rowNum++;
			String ref = row[1];   //Kraken refid
			String krakenEventType = row[3];
			boolean leveraged = "margin".equals(krakenEventType);
			EventType type = EventType.valueOf(KrakenAdapter.adapt(krakenEventType));
			ZonedDateTime dateTime = parseDateTime(row[2], rowNum);
			if (row[0].isBlank() && type.equals(EventType.Withdrawal)) {          //Kraken txid
				logger.warn("Using blank transaction ID to save the date");
				withdrawalRefMap.put(ref, dateTime);
				continue;
			}
			if (row[0].isBlank()) {          //Kraken txid
				logger.warn("Ignoring blank transaction ID");
				continue;
			}
			String buy = row[7];
			String currencyCode = KrakenAdapter.adaptCurrency(row[6]);
			String buyCurrency = currencyCode;
			String sell = buy;
			String sellCurrency = currencyCode;
			String feeString = row[8];
			String feeCurrency = currencyCode;
			CurrencyExchange exchange = KRAKEN;
			String group = "";

			eventCount++;
			CryptoEvent cryptoEvent = null;

			CurrencyAmount balance = CurrencyAmount.of(row[9],row[6].substring(1));
			FormattedComment formattedComment = FormattedComment.of(balance, balance, "Imported By Bitcoin Accounting");
			BigDecimal buyBigDecimal = new BigDecimal(buy);
			BigDecimal sellBigDecimal = new BigDecimal(sell);
			CurrencyAmount buyAmount;
			CurrencyAmount sellAmount;
			if (buyBigDecimal.signum() < 0) {
				buyAmount = null;
				sellAmount = sell.isBlank() ? null : CurrencyAmount.of(sellBigDecimal.negate(), sellCurrency);
			} else {
				buyAmount = buy.isBlank() ? null : CurrencyAmount.of(buyBigDecimal, buyCurrency);
				sellAmount = null;
			}
			CurrencyFee fee;
			if (StringUtils.isBlank(feeString)) {
				fee = CurrencyFee
						.of(CurrencyAmount.of(BigDecimal.ZERO, batchGroup.getBaseCurrency().getCurrencyCode()));
			} else {
				CurrencyAmount feeAmount = CurrencyAmount.of(new BigDecimal(feeString), feeCurrency);
				fee = CurrencyFee.of(feeAmount);
			}
			if ("BTC".equals(currencyCode)) {
				if (sellAmount != null) {
					btcBalance.subtract(sellAmount, KRAKEN);
				} else {
					btcBalance.add(buyAmount, KRAKEN);
				}
				btcBalance.subtract(fee.getAmount(), KRAKEN);
			}
			logger.warn("Kraken BTC balance = {}", btcBalance.toString());

			if (EventType.Deposit.equals(type) || EventType.Loan.equals(type)) {
				deposits++;
				CurrencyDeposit currencyDeposit = CurrencyDeposit.of(batchGroup, buyAmount, dateTime, fee);
				currencyDeposit.setComment("");
				// TODO, ideally should be conditional upon whether this is a transfer
				logger.warn("alternatively, this could be conditional upon whether this is a transfer");
//				if (testIncludeDeposits) {
//					batchGroup.add(CurrencyBatch.of(currencyDeposit.getAmount(), currencyDeposit.getWhen(), currencyDeposit.getAmount()));
//				} else if (testIncludeFiatDeposits  && !currencyDeposit.getAmount().isCrypto()) {
//					batchGroup.add(CurrencyBatch.of(currencyDeposit.getAmount(), currencyDeposit.getWhen(), currencyDeposit.getAmount()));
//				}
				cryptoEvent = currencyDeposit;
				ExchangeCurrencyBalance exchangeCurrencyBalance = new ExchangeCurrencyBalance();
				exchangeCurrencyBalance.setWhen(cryptoEvent.getWhen());
				exchangeCurrencyBalance.setCurrencyExchange(CurrencyExchange.KRAKEN);
				exchangeCurrencyBalance.setBalance(CurrencyAmount.of(row[9],row[6].substring(1)).negate());
				cryptoEvents.add(exchangeCurrencyBalance);
			}
			if (EventType.Withdrawal.equals(type) || EventType.Spend.equals(type) || EventType.Repayment.equals(type)) {
				withdrawals++;
				// convert from Kraken CSV, which is exclusive, to standard CSV, which is
				// inclusive of fee
				// in terms of balance effect
				// in other words in the cointracking standard format, the fee is informational in terms of the
				// withdrawal amount, i.e. the withdrawal amount is the balance effect
				CurrencyWithdrawal currencyWithdrawal = CurrencyWithdrawal.of(batchGroup,
						sellAmount.abs().add(fee.getAmount().abs()), dateTime, fee);
				cryptoEvent = currencyWithdrawal;
				ZonedDateTime time = withdrawalRefMap.get(ref);
				if (time != null) {
					currencyWithdrawal.setWhen(time);
				} else {
					time = cryptoEvent.getWhen();
				}
				ExchangeCurrencyBalance exchangeCurrencyBalance = new ExchangeCurrencyBalance();
				exchangeCurrencyBalance.setWhen(time);
				exchangeCurrencyBalance.setCurrencyExchange(CurrencyExchange.KRAKEN);
				exchangeCurrencyBalance.setBalance(CurrencyAmount.of(row[9],row[6].substring(1)).negate());
				cryptoEvents.add(exchangeCurrencyBalance);
			}

			logger.info("rowNum = " + rowNum);
			if (EventType.Income.equals(type)) {
				CurrencyTradeProfit tradeProfit = CurrencyTradeProfit.of(batchGroup, buyAmount, dateTime, fee);
				cryptoEvent = tradeProfit;
				incomeTypeCount++;
			} else if (EventType.Lost.equals(type) || EventType.Expense.equals(type)) {
				CurrencyTradeLoss tradeLoss = CurrencyTradeLoss.of(batchGroup, sellAmount, dateTime, fee);
				cryptoEvent = tradeLoss;
				lossTypeCount++;
			} else if (group.startsWith("Kraken Margin")) {
				if (buyAmount.isMonetary() && buyAmount.getMonetaryAmount().getNumber().numberValue(BigDecimal.class)
						.equals(new BigDecimal("0.00000001"))) {
					// special case for Coin Tracking workaround rows that I manually created
					// just treat the loss as a fee for now, even though it isn't a fee
					if (sellAmount.equals(fee.getAmount())) {
						sellAmountEqualsFeeAmountForKrakenMargin++;
						fee = CurrencyFee.ofZero();
					}
					CurrencyTradeLoss tradeLoss = CurrencyTradeLoss.of(batchGroup, sellAmount, dateTime, fee);
					cryptoEvent = tradeLoss;
					specialCaseMarginGain++;
				} else {
					if (buyAmount.equals(fee.getAmount())) {
						buyAmountEqualsFeeAmountForKrakenMargin++;
						fee = CurrencyFee.ofZero();
					}
					CurrencyTradeProfit tradeProfit = CurrencyTradeProfit.of(batchGroup, buyAmount, dateTime, fee);
					cryptoEvent = tradeProfit;
				}
			} else if (group.startsWith("Kraken Rollover")) {
				// special case for Coin Tracking workaround rows that I manually created
				CurrencyTradeLoss tradeLoss = CurrencyTradeLoss.of(batchGroup, CurrencyAmount.getZeroNZD(), dateTime,
						fee);
				cryptoEvent = tradeLoss;
			} else if (EventType.Margin.equals(type)) {
				// CurrencyAmount zeroAmount = CurrencyAmount.of(BigDecimal.ZERO, sellCurrency);
				boolean isLoss = buyAmount == null || (buyBigDecimal.compareTo(BigDecimal.ZERO) == 0);
				CryptoEvent tradeProfitOrLoss;
				if (isLoss) {
					// fee isn't included in balance affect so add it into the amount
					// if (sellAmount == null) {
					// buyAmount = CurrencyAmount.of(BigDecimal.ZERO,
					// fee.getAmount().getCurrencyCode().getCurrencyCode());

					if (sellAmount == null) {
						sellAmount = CurrencyAmount.of(BigDecimal.ZERO,
								fee.getAmount().getCurrencyCode().getCurrencyCode());
					}
					BigDecimal sellBigDecimal2 = sellAmount.getBigDecimal();
					BigDecimal feeBigDecimal = fee.getAmount().getBigDecimal();
					tradeProfitOrLoss = CurrencyTradeLoss.of(batchGroup, CurrencyAmount
							.of(sellBigDecimal2.add(feeBigDecimal), sellAmount.getCurrencyCode().getCurrencyCode()),
							dateTime, fee);
//					} else {
//						tradeProfitOrLoss =
//								CurrencyTradeLoss.of(batchGroup,
//										CurrencyAmount.of(sellAmount.getBigDecimal().negate().add(fee.getAmount().getBigDecimal()),
//												buyAmount.getCurrencyCode().getCurrencyCode()),
//										dateTime, fee);
//					}
				} else {
					// CurrencyAmount feeAmount = CurrencyAmount.of(BigDecimal.ZERO,
					// buyAmount.getCurrencyCode().getCurrencyCode());
					tradeProfitOrLoss = CurrencyTradeProfit.of(batchGroup, buyAmount.subtract(fee.getAmount()),
							dateTime, fee);
				}
				cryptoEvent = tradeProfitOrLoss;
				lossTypeCount++;
			} else if (EventType.Rollover.equals(type)) {
				// CurrencyAmount zeroAmount = CurrencyAmount.of(BigDecimal.ZERO, sellCurrency);
				CurrencyTradeLoss tradeLoss = CurrencyTradeLoss.of(batchGroup, fee.getAmount(), dateTime, fee);
				tradeLoss.setRollover(true);
				cryptoEvent = tradeLoss;
				lossTypeCount++;
			} else if (EventType.Trade.equals(type)) {
				CurrencyConversion conversionHalf = (CurrencyConversion) transactionIDMap.get(ref);
				if (conversionHalf != null) {
					formattedComment = FormattedComment.of(balance, conversionHalf.getFormattedComment().getBalance2(), "Imported By Bitcoin Accounting");
					boolean conversionHalfIsBuy = false;
					if (sellAmount != null) {
						conversionHalf.setFrom(sellAmount);
						conversionHalfIsBuy = true;
					} else {
						conversionHalf.setTo(buyAmount);
					}
					CurrencyAmount conversionHalfFeeAmount = conversionHalf.getFee().getAmount();
					CurrencyAmount thisFeeAmount = fee.getAmount();
					if (thisFeeAmount.getBigDecimal().compareTo(BigDecimal.ZERO) == 0) {
						if (!conversionHalfIsBuy) {
							conversionHalf.setFrom(conversionHalf.getFrom().add(conversionHalf.getFee().getAmount()));
						} else {
							conversionHalf.setTo(conversionHalf.getTo().subtract(conversionHalf.getFee().getAmount()));
						}
					} else if (conversionHalfFeeAmount.getBigDecimal().compareTo(BigDecimal.ZERO) == 0) {
						if (thisFeeAmount.getBigDecimal().compareTo(BigDecimal.ZERO) == 0) {
							throw new AssertionError("Unexpected free Kraken Trade");
						}
						conversionHalf.setFee(CurrencyFee.of(thisFeeAmount));
						// since fee could be on both, it needs to be subtracted from both:
						if (conversionHalfIsBuy) {
							CurrencyAmount to = conversionHalf.getTo();
							CurrencyAmount amount = conversionHalf.getFee().getAmount();
							if (to.getCurrencyCode().equals(amount.getCurrencyCode())) {
								conversionHalf.setTo(to.subtract(amount));
							} else {
								CurrencyAmount from = conversionHalf.getFrom();
								conversionHalf.setFrom(from.add(conversionHalf.getFee().getAmount()));
							}
						} else {
							conversionHalf.setTo(buyAmount.subtract(fee.getAmount()));
						}
					} else if (thisFeeAmount.getBigDecimal().compareTo(BigDecimal.ZERO) == 0) {
						logger.info("this fee is zero sometimes as expected as only one side will have a fee");
						if (conversionHalfIsBuy) {
							conversionHalf.setTo(conversionHalf.getTo().subtract(conversionHalf.getFee().getAmount()));
						} else {
							conversionHalf.setTo(buyAmount.subtract(fee.getAmount()));
						}
					} else {
						// throw new AssertionError("Unexpected fees on both Kraken Trade");
						// subtract fee from amount bought and keep other fee
						if (conversionHalfIsBuy) {
							conversionHalf.setTo(conversionHalf.getTo().subtract(conversionHalf.getFee().getAmount()));
							conversionHalf.setFrom(sellAmount.add(fee.getAmount()));
							// conversionHalf.setFee(convers);
						} else {
							conversionHalf.setTo(buyAmount.subtract(fee.getAmount()));
							conversionHalf.setFrom(conversionHalf.getFrom().add(conversionHalf.getFee().getAmount()));
							conversionHalf.setFee(fee);
						}
						bothKrakenTradeSidesHaveFees++;
					}
					conversionHalf.setIncomplete(false);
					ExchangeCurrencyBalance exchangeCurrencyBalance = new ExchangeCurrencyBalance();
					exchangeCurrencyBalance.setWhen(dateTime);
					exchangeCurrencyBalance.setCurrencyExchange(CurrencyExchange.KRAKEN);
					exchangeCurrencyBalance.setBalance(CurrencyAmount.of(row[9],row[6].substring(1)).negate());
					cryptoEvents.add(exchangeCurrencyBalance);
					cryptoEvent = conversionHalf;
					// continue;
				} else {
					CurrencyConversion conversion = CurrencyConversion.of(batchGroup, buyAmount, dateTime, sellAmount,
							fee);

					if (leveraged || group.startsWith("Kraken Margin") || group.startsWith("Kraken Rollover") || EventType.Margin.equals(type)
							|| EventType.Rollover.equals(type)) {
						conversion.setLeveraged(true);
					}
					conversion.setIncomplete(true);
					cryptoEvent = conversion;
					ExchangeCurrencyBalance exchangeCurrencyBalance = new ExchangeCurrencyBalance();
					exchangeCurrencyBalance.setWhen(cryptoEvent.getWhen());
					exchangeCurrencyBalance.setCurrencyExchange(CurrencyExchange.KRAKEN);
					exchangeCurrencyBalance.setBalance(CurrencyAmount.of(row[9],row[6].substring(1)).negate());
					cryptoEvents.add(exchangeCurrencyBalance);
					conversionHalfCount++;
				}
			}
			if (cryptoEvent != null) {
				cryptoEvent.setFormattedComment(formattedComment);
				if (!(cryptoEvent instanceof CurrencyConversion)
						|| !((CurrencyConversion) cryptoEvent).isIncomplete()) {
					cryptoEvent.setGroup(group);
					cryptoEvent.setRowNum(rowNum);
					cryptoEvent.setCurrencyExchange(exchange);
					cryptoEvents.add(cryptoEvent);
				}
			} else {
				throw new AssertionError("Crypto Event should never be null");
			}
			transactionIDMap.put(ref, cryptoEvent);
		}
		return cryptoEvents;
	}

	public static void writeEventsToCSV(List<CryptoEvent> cryptoEvents, String filename) {
		List<String[]> lines = new ArrayList<String[]>();
		String[] line = new String[] {"Type", "Buy", "Cur.", "Sell", "Cur.", "Fee", "Cur.", "Exchange", "Group", "Comment", "Date"};
		lines.add(line);
		logger.warn("Sorting events, could be slow...");
		Collections.sort(cryptoEvents, Collections.reverseOrder()); // may not be necessary, but just in case
		for (CryptoEvent event : cryptoEvents) {
			line = new String[11];
			line[7] = event.getCurrencyExchange().name();
			line[8] = "";
			line[9] = optional(event.getFormattedComment(), "Imported by Bitcoin Accounting");
			ZonedDateTime time = parseDateTime("2021-10-10 19:57:28", -1);
			if (event.getWhen().isEqual(time)) {
				line[9] = "Airdrop:Imported by Bitcoin Accounting";
			}
			line[10] = ZonedDateTimeUtils.format(event.getWhen());
			if (event instanceof CurrencyConversion) {
				CurrencyConversion conversion = (CurrencyConversion) event;
				if (conversion.isIncomplete()) {
					throw new AssertionError("incomplete event");
				}
				line[0] = EventType.Trade.name();
				line[1] = conversion.getTo().getBigDecimal().toPlainString() + "";
				line[2] = conversion.getTo().getCurrencyCode().getCurrencyCode() + "";
				CurrencyAmount from = conversion.getFrom();
				line[3] = from == null ? "" : from.getBigDecimal().toPlainString() + "";
				line[4] = from == null ? "" : from.getCurrencyCode().getCurrencyCode() + "";
				line[5] = conversion.getFee().getAmount().getBigDecimal().toPlainString() + "";
				line[6] = conversion.getFee().getAmount().getCurrencyCode().getCurrencyCode();
			} else if (event instanceof CurrencyDeposit) {
				CurrencyDeposit deposit = (CurrencyDeposit) event;
				line[0] = EventType.Deposit.name();
				BigDecimal depositAmount = deposit.getAmount().getBigDecimal();
				String depositAmountString = depositAmount.toPlainString();
				if (!deposit.getAmount().isCrypto()) {
					depositAmountString = FormatUtils.format(deposit.getAmount().getMonetaryAmount());
				}
				line[1] = deposit.getAmount() == null ? "NaN" : depositAmountString + "";
				line[2] = deposit.getAmount() == null ? "N/A"
						: deposit.getAmount().getCurrencyCode().getCurrencyCode() + "";
				line[3] = "";
				line[4] = "";
				line[5] = deposit.getFee().getAmount().getBigDecimal().toPlainString() + "";
				line[6] = deposit.getFee().getAmount().getCurrencyCode().getCurrencyCode();
			} else if (event instanceof CurrencyWithdrawal) {
				CurrencyWithdrawal withdrawal = (CurrencyWithdrawal) event;
				line[0] = EventType.Withdrawal.name();
				line[1] = "";
				line[2] = "";
				line[3] = withdrawal.getAmount().getBigDecimal().abs().toPlainString() + "";
				line[4] = withdrawal.getAmount().getCurrencyCode().getCurrencyCode() + "";
				line[5] = withdrawal.getFee().getAmount().getBigDecimal().toPlainString() + "";
				line[6] = withdrawal.getFee().getAmount().getCurrencyCode().getCurrencyCode();
			} else {
				continue;
			}
			lines.add(line);
		}
		File location;
		if (filename != null) {
			location = CSVWriter.writeCSV(filename, lines);
		} else {
			throw new AssertionError("Please specify CSV file destination");
		}
		try {
			logger.info("Writing csv: " + location.getCanonicalPath());
			File sourceControlLocation = new File("src/main/resources/cointracking/Stellar/" + location.getName());
			logger.info("source control location = " + sourceControlLocation.getCanonicalPath());
			FileUtils.copyFile(location, sourceControlLocation);
		} catch (IOException e) {
			throw new AssertionError(e);
		}
	}

	private static String optional(FormattedComment formattedComment, String string) {
		if (formattedComment == null) {
			return string;
		} else {
			return String.valueOf(formattedComment);
		}
	}

	private static ZonedDateTime parseDateTime(String dateString, int rowNum) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
		LocalDateTime localDateTime = null;
		try {
			localDateTime = LocalDateTime.parse(dateString, formatter);
		} catch (DateTimeParseException e) {
			logger.info("rowNum = {}, dateString = {}", rowNum, dateString);
			throw e;
		}
		return ZonedDateTime.of(localDateTime, UTC_ZONE);
	}

	public static List<CryptoEvent> process(List<CryptoEvent> events, CurrencyBatchGroup batch) throws ParseException {
		String tradesCSV = "cointracking/kraken/kraken-ledgers-fy2022.csv";
		List<String[]> list = CSVParser.newInstance()
				.parseFile(CoinTrackingParser.class.getClassLoader().getResourceAsStream(tradesCSV), true);

		events = events != null ? events : new ArrayList<CryptoEvent>();
		events = parseCSVLines(list, events , batch);

		writeEventsToCSV(events, "kraken-standard-format.csv");

		events = StellarCSVParser.process(events, batch);
		writeEventsToCSV(events, "fy2022-all-standard-format.csv");
		return events;
	}
	/*
	 * this parser parsers all of them
	 */
	public static void main(String[] args) throws ParseException {
		CurrencyBatchGroup batch = CurrencyBatchGroup.of(Monetary.getCurrency("NZD"));
		process(null, batch);
	}
}
